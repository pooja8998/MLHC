{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i3ECS6xY6S6I"
   },
   "source": [
    "# BINF GU 4002: Machine Learning for Healthcare, Spring 2025\n",
    "# Assignment \\#2: Regularization and Model Selection\n",
    "## DUE: 11:59 PM, Tuesday, March 11, 2025\n",
    "\n",
    "This assignment explores regularization and model selection. We will use ideas explored in class and build intuition around how to select appropriate modelling techniques for the specific data and task you have. As an illustrative example, you will be using embeddings generated from a large-scale protein language model to predict the structural effects of a mutation in the protein sequence.\n",
    "\n",
    "**<font color=\"red\">Instructions: Please run the notebook using Google Colab to prevent any dependency / package issues. Make sure that your written answers are formatted using </font>$\\LaTeX$<font color=\"red\"> in `markdown` cells. When submitting, please name your files `{UNI}_binf4002_mlhc_assignment_2.{filetype}` and submit a `.ipynb` version of your Jupyter notebook. Additionally, we will render the jupyter notebook using nbviewer (https://nbviewer.org/). When you are submitting your final version, upload your homework to a public github repository and paste the github link to nbviewer and obtain the final rendered link </font>**\n",
    "\n",
    "Link to github repository:\n",
    "\n",
    "Link to nbviewer render:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9z09RKCp6S6K"
   },
   "source": [
    "#### The Problem and Data\n",
    "\n",
    "We will be using data from the [Envision](https://pmc.ncbi.nlm.nih.gov/articles/pmid/29226803/) paper (Gray et al.2018). The goal is to perform variant effect prediction, where variants of β-Lactamase are created by through single-residue mutations (one amino-acid is replaced by another amino-acid in the protein sequence). The data is generated using a method called deep mutational scan.\n",
    "\n",
    "From Gray et al. 2018:\n",
    "\n",
    "> In a deep mutational scan, selection for protein function among a library of nearly all possible single amino acid variants of a protein is coupled to high-throughput DNA sequencing (Fowler and Fields, 2014; Fowler et al., 2014). Sequencing reveals how each variant’s frequency changes during selection, yielding quantitative scores that describe the functional effect of each variant in the library. A large-scale mutagenesis dataset contains deep and unbiased information, capturing the effects of most variants at every position in a single protein. We hypothesize that large-scale mutagenesis datasets contain informative and generalizable patterns that can be used to predict variant effects in disparate proteins.\n",
    "\n",
    "The prediction target is a quantitative metric known as variant effect score, which depends on the protein of interest. For example, this score may capture the severity of functional disruption.\n",
    "\n",
    "The embeddings are generated from [ESM](https://www.nature.com/articles/s41588-023-01465-0), a large-scale language (foundation) model for protein sequences developed by Meta AI. The repository can be found here: https://github.com/facebookresearch/esm/tree/main  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "fyjgh7LjG7TZ"
   },
   "outputs": [],
   "source": [
    "# STARTER CODE\n",
    "# !pip install git+https://github.com/facebookresearch/esm.git\n",
    "# !curl -O https://dl.fbaipublicfiles.com/fair-esm/examples/P62593_reprs.tar.gz\n",
    "# !tar -xzf P62593_reprs.tar.gz\n",
    "# !curl -O https://dl.fbaipublicfiles.com/fair-esm/examples/P62593.fasta\n",
    "# !pwd\n",
    "# !ls\n",
    "\n",
    "FASTA_PATH = \"/content/P62593.fasta\" # Path to P62593.fasta\n",
    "EMB_PATH = \"/content/P62593_reprs\" # Path to directory of embeddings for P62593.fasta\n",
    "EMB_LAYER = 34"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "EQtZW-xHFXWZ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5397, 1280)\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "from collections import Counter\n",
    "from tqdm import tqdm\n",
    "\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "import scipy\n",
    "from sklearn.model_selection import GridSearchCV, train_test_split\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "import esm\n",
    "\n",
    "ys = []\n",
    "Xs = []\n",
    "\n",
    "for header, _seq in esm.data.read_fasta(FASTA_PATH):\n",
    "    scaled_effect = header.split('|')[-1]\n",
    "    ys.append(float(scaled_effect))\n",
    "    fn = f'{EMB_PATH}/{header}.pt'\n",
    "    embs = torch.load(fn)\n",
    "    Xs.append(embs['mean_representations'][EMB_LAYER])\n",
    "\n",
    "Xs = torch.stack(Xs, dim=0).numpy()\n",
    "\n",
    "train_size = 0.8\n",
    "Xs_train, Xs_test, ys_train, ys_test = train_test_split(Xs, ys, train_size=train_size, random_state=42)\n",
    "\n",
    "print(Xs.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_gmQBQJeFpE9"
   },
   "source": [
    "#### Data exploration\n",
    "\n",
    "Note that the embeddings are high-dimensional. To qualitatively analyse if there are patterns (ex. naturally-forming clusters) in the data, we can visualize the data using dimensionality reduction. The color indicates the level of functional distruption in the protein, and each point represents a different amino-acid sequence containing a specific mutation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "KEoi34sZFvSY"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_pca_components = 60\n",
    "pca = PCA(num_pca_components)\n",
    "Xs_train_pca = pca.fit_transform(Xs_train)\n",
    "\n",
    "fig_dims = (7, 6)\n",
    "fig, ax = plt.subplots(figsize=fig_dims)\n",
    "sc = ax.scatter(Xs_train_pca[:,0], Xs_train_pca[:,1], c=ys_train, marker='.')\n",
    "ax.set_xlabel('PCA first principal component')\n",
    "ax.set_ylabel('PCA second principal component')\n",
    "plt.colorbar(sc, label='Variant Effect')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8U90OHck6S6L"
   },
   "source": [
    "## [30 Points] Question 1: Bias Variance Tradeoff\n",
    "\n",
    "Modeling data in healthcare is often in a data-constrained setting, where we may be restricted to high dimensional data with limited samples due to costs of experimentation and data acquisition. However, a key desiderata for our models is the ability to generalize to unseen samples.\n",
    "\n",
    "How do we know if we have enough data for a given modelling task to achieve generalization? How do we choose the right modeling strategy? We will explore these questions using a phenomenon in machine learning known as the bias-variance tradeoff.\n",
    "\n",
    "Consider a dataset $$D = \\{(x_1, y_1), (x_2, y_2), ..., (x_n, y_n) \\}$$\n",
    "\n",
    "and suppose that the relationship between $x \\in \\mathbb{R}^1$ and $y \\in \\mathbb{R}^1$ values are specified by an unknown true underlying function as $y = f(x) + \\epsilon$ where $\\epsilon \\sim N(0, \\sigma^2)$.\n",
    "\n",
    "Now, suppose we have trained an approximation of the underlying true function using the training dataset with $\\hat{y} = \\hat{f}(x)$, where $\\hat{y}$ corresponds to the prediction of $y$\n",
    "\n",
    "#### [15 Points] 1.1: Prove the bias-variance decomposition of mean squared error\n",
    "$$\\mathbb{E}_{D} \\left[(y - \\hat{f}(x) )^2\\right] = \\underbrace{\\left(\\mathbb{E}\\left[\\hat{f}(x) \\right] - f(x) \\right)^2}_{Bias^2} + \\underbrace{\\mathbb{E}_{D}\\left[\\left(\\hat{f}(x) - \\mathbb{E}\\left[\\hat{f}(x)\\right] \\right)^2 \\right]}_{Variance}$$\n",
    "\n",
    "\n",
    "#### [5 Points] 1.2: What does it mean for the prediction model $\\hat{f}(x)$ to have high bias? What are potential causes of high bias?\n",
    "\n",
    "\n",
    "#### [5 Points] 1.3: What does it mean for the model to have high variance? What are potential causes of high variance?\n",
    "\n",
    "#### [5 Points] 1.4 Can bias and variance decrease at the same time?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4rAxnNft6S6M"
   },
   "source": [
    "# [30 Points] Question 2: Regularization\n",
    "\n",
    "A model with high bias is also called \"underfitting\", while a model with high variance is also called \"overfitting\". One idea from the bias-variance tradeoff is that purposefully introducing bias may be an effective strategy in mitigating overfitting and reducing variance.\n",
    "\n",
    "We will now explore regularization, a common strategy used to introduce bias in the model to improve generalization.\n",
    "\n",
    "Consider a dataset $$D = \\{(\\textbf{x}_1, y_1), (\\textbf{x}_2, y_2), ..., (\\textbf{x}_n, y_n) \\}$$\n",
    "\n",
    "where now each sample contains a vector of $d$ features $\\textbf{x}_i \\in \\mathbb{R}^{d \\times 1}$\n",
    "\n",
    "Suppose we specifiy our model to be a linear regression model. That is, we consider a model with a vector of parameters $\\beta \\in \\mathbb{R}^{d \\times 1}$ such that $y_i = \\textbf{x}_i^T \\beta + \\epsilon $\n",
    "\n",
    "Note that we can equivalently write the set of $n$ equations stacked together using a matrix $\\textbf{X} \\in \\mathbb{R}^{n \\times d}$ and $\\textbf{y} \\in \\mathbb{R}^{n \\times 1}$ as follows:\n",
    "\n",
    "$$\\textbf{y} = \\textbf{X} \\beta + \\epsilon \\text{ , } \\quad \\epsilon \\sim N(0, \\sigma^2 I)$$\n",
    "\n",
    "#### [10 Points] Question 2.1: Derive the optimal solution to the L2-regularized Squared Error Loss (also known as ridge regression) given by\n",
    "\n",
    "$$(\\textbf{X}\\beta - \\textbf{y})^T(\\textbf{X}\\beta - \\textbf{y}) + \\lambda \\beta^T\\beta $$\n",
    "\n",
    "\n",
    "#### [15 Points] Question 2.2: Build a Ridge Regression with the skeleton code below (Fill in TODOs).\n",
    "\n",
    "#### [5 Points] Question 2.3: What do you notice in the relationship between MSE and variance as we increase the lambda parameter?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "rlhnpVV47bzz"
   },
   "outputs": [],
   "source": [
    "class RidgeRegression:\n",
    "    def __init__(self, lambda_reg=1.0):\n",
    "        self.lambda_reg = lambda_reg  # Regularization parameter\n",
    "        self.beta = None  # Coefficients\n",
    "\n",
    "    def fit(self, X, y):\n",
    "        \"\"\" Compute the closed-form solution for Ridge Regression. \"\"\"\n",
    "        n, d = X.shape\n",
    "        I = np.eye(d)  # Identity matrix\n",
    "        XTX = X.T @ X  # Compute X^T X\n",
    "        XTy = X.T @ y  # Compute X^T y\n",
    "\n",
    "        # Closed-form solution\n",
    "        self.beta = np.linalg.inv(XTX + self.lambda_reg * I) @ XTy\n",
    "\n",
    "    def predict(self, X):\n",
    "        \"\"\" Predict using the learned weights. \"\"\"\n",
    "        return X @ self.beta\n",
    "\n",
    "    def mse(self, y_true, y_pred):\n",
    "        \"\"\" Compute Mean Squared Error (MSE). \"\"\"\n",
    "        return np.mean((y_true - y_pred) ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "RJOBHnpG9lhl"
   },
   "outputs": [],
   "source": [
    "# Define a range of lambda values\n",
    "lambdas = np.logspace(-3, 3, 30)  # From 0.001 to 1000\n",
    "mse_values = []\n",
    "variance_values = []\n",
    "\n",
    "# Compute bias and variance for each lambda\n",
    "for lambda_reg in lambdas:\n",
    "    model = RidgeRegression(lambda_reg)\n",
    "    model.fit(Xs_train, ys_train)\n",
    "\n",
    "    predictions = model.predict(Xs_test)\n",
    "    mse = np.mean((ys_test - predictions) ** 2)\n",
    "    variance = np.var(predictions)\n",
    "\n",
    "    mse_values.append(mse)\n",
    "    variance_values.append(variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "sBq_7sF5pB4y"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting Code for question 2.3\n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.plot(lambdas, mse_values, label=\"MSE\", color='blue')\n",
    "plt.plot(lambdas, variance_values, label=\"Variance\", color='red')\n",
    "plt.xscale('log')  # Log scale for better visualization\n",
    "plt.xlabel(\"Regularization Strength (λ)\")\n",
    "plt.ylabel(\"Error\")\n",
    "plt.title(\"Bias-Variance Tradeoff in Ridge Regression\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7rBG_tvGzTcQ"
   },
   "source": [
    "# [20 Points] Question 3: Bayesian Variable Selection\n",
    "\n",
    "Follwing the intuition we have built around regularization, we will now explore a more complex Bayesian model for the protein variant effect prediction task. We assume the same linear model with the same dimensionality as before\n",
    "\n",
    "$$\\textbf{y} = \\textbf{X} \\beta + \\epsilon \\text{ , } \\quad \\epsilon \\sim N(0, \\sigma^2 I)$$\n",
    "\n",
    "However, now we will introduce a prior on the model parameters $\\beta$. For each $\\beta_j$ where $j=1, ..., d$, the prior takes the following form\n",
    "\n",
    "$$ \\beta_j | \\gamma_j \\sim (1 - \\gamma_j)\\cdot 0 + \\gamma_j N(0, \\sigma_\\beta^2) \\text{ , } \\quad \\gamma_j \\sim \\text{Bernoulli}(p)$$\n",
    "\n",
    "Equivalently, we can rewrite the resulting model in a slightly more compact form where $\\circ$ indicates a element-wise (hadamard) product between two vectors.\n",
    "\n",
    "$$ \\beta \\sim N(0, \\sigma_\\beta^2) $$\n",
    "$$ \\textbf{y}_i | \\textbf{x}_i, \\beta, \\gamma \\sim N((\\gamma \\circ \\beta)^T \\textbf{x}_i, \\sigma^2)$$\n",
    "\n",
    "\n",
    "#### [5 Points] 3.1: What is the role of the $\\gamma$ parameter in determining $\\beta$ in the prior? What happens when $\\gamma = 1$ and $\\gamma = 0$?\n",
    "\n",
    "#### [10 Points] 3.2: We would like to fit the parameters $\\gamma, \\beta$ using MAP estimation. Write the posterior objective $p(\\gamma, \\beta | \\textbf{X}, \\textbf{y})$ in terms of the priors and likelihoods. (We will assume $\\sigma^2$ is fixed for purposes of this problem)\n",
    "\n",
    "Hints: Recall the posterior probability we wish to maximize given data is $p(\\theta | \\text{X}, \\text{y}) \\propto p(\\theta) \\prod_i^n p(y_i |x_i, \\theta) $. What are the distributional families of the priors and likelihoods?\n",
    "\n",
    "#### [5 Points] 3.3: Run the code below to obtain the MAP estimate of the optimal parameters of $\\gamma$. Interpret the plot. What does the posterior $p(\\gamma_j = 1 | \\textbf{X}, \\textbf{y})$ being high or low indicate for a given $j \\in \\{1, ..., d\\}$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pymc in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (5.12.0)\n",
      "Requirement already satisfied: arviz>=0.13.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (0.17.1)\n",
      "Requirement already satisfied: cachetools>=4.2.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (5.5.2)\n",
      "Requirement already satisfied: cloudpickle in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.2.1)\n",
      "Requirement already satisfied: fastprogress>=0.2.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.0.3)\n",
      "Requirement already satisfied: numpy>=1.15.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.24.4)\n",
      "Requirement already satisfied: pandas>=0.24.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.2.2)\n",
      "Requirement already satisfied: pytensor<2.20,>=2.19 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.19.0)\n",
      "Requirement already satisfied: scipy>=1.4.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.13.1)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (4.12.2)\n",
      "Requirement already satisfied: setuptools>=60.0.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (74.1.2)\n",
      "Requirement already satisfied: matplotlib>=3.5 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (3.9.2)\n",
      "Requirement already satisfied: packaging in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (24.1)\n",
      "Requirement already satisfied: xarray>=0.21.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (2024.7.0)\n",
      "Requirement already satisfied: h5netcdf>=1.0.2 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (1.6.1)\n",
      "Requirement already satisfied: xarray-einstats>=0.3 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (0.7.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2024.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2024.1)\n",
      "Requirement already satisfied: filelock in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (3.17.0)\n",
      "Requirement already satisfied: etuples in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.3.9)\n",
      "Requirement already satisfied: logical-unification in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.4.6)\n",
      "Requirement already satisfied: miniKanren in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (1.0.3)\n",
      "Requirement already satisfied: cons in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.4.6)\n",
      "Requirement already satisfied: h5py in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from h5netcdf>=1.0.2->arviz>=0.13.0->pymc) (3.13.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (1.3.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (4.54.1)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (1.4.7)\n",
      "Requirement already satisfied: pillow>=8 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (10.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (3.2.0)\n",
      "Requirement already satisfied: importlib-resources>=3.2.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (6.4.5)\n",
      "Requirement already satisfied: six>=1.5 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from python-dateutil>=2.8.2->pandas>=0.24.0->pymc) (1.16.0)\n",
      "Requirement already satisfied: toolz in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from logical-unification->pytensor<2.20,>=2.19->pymc) (1.0.0)\n",
      "Requirement already satisfied: multipledispatch in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from logical-unification->pytensor<2.20,>=2.19->pymc) (1.0.0)\n",
      "Requirement already satisfied: zipp>=3.1.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib>=3.5->arviz>=0.13.0->pymc) (3.20.2)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.2\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.0.1\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install pymc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: pymc\n",
      "Version: 5.12.0\n",
      "Summary: Probabilistic Programming in Python: Bayesian Modeling and Probabilistic Machine Learning with PyTensor\n",
      "Home-page: http://github.com/pymc-devs/pymc\n",
      "Author: \n",
      "Author-email: \n",
      "License: Apache License, Version 2.0\n",
      "Location: /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages\n",
      "Requires: arviz, cachetools, cloudpickle, fastprogress, numpy, pandas, pytensor, scipy, typing-extensions\n",
      "Required-by: \n",
      "Requirement already satisfied: pymc in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (5.12.0)\n",
      "Requirement already satisfied: arviz>=0.13.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (0.17.1)\n",
      "Requirement already satisfied: cachetools>=4.2.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (5.5.2)\n",
      "Requirement already satisfied: cloudpickle in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.2.1)\n",
      "Requirement already satisfied: fastprogress>=0.2.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.0.3)\n",
      "Requirement already satisfied: numpy>=1.15.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.24.4)\n",
      "Requirement already satisfied: pandas>=0.24.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.2.2)\n",
      "Requirement already satisfied: pytensor<2.20,>=2.19 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (2.19.0)\n",
      "Requirement already satisfied: scipy>=1.4.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (1.13.1)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pymc) (4.12.2)\n",
      "Requirement already satisfied: setuptools>=60.0.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (74.1.2)\n",
      "Requirement already satisfied: matplotlib>=3.5 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (3.9.2)\n",
      "Requirement already satisfied: packaging in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (24.1)\n",
      "Requirement already satisfied: xarray>=0.21.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (2024.7.0)\n",
      "Requirement already satisfied: h5netcdf>=1.0.2 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (1.6.1)\n",
      "Requirement already satisfied: xarray-einstats>=0.3 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from arviz>=0.13.0->pymc) (0.7.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2024.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pandas>=0.24.0->pymc) (2024.1)\n",
      "Requirement already satisfied: filelock in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (3.17.0)\n",
      "Requirement already satisfied: etuples in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.3.9)\n",
      "Requirement already satisfied: logical-unification in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.4.6)\n",
      "Requirement already satisfied: miniKanren in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (1.0.3)\n",
      "Requirement already satisfied: cons in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from pytensor<2.20,>=2.19->pymc) (0.4.6)\n",
      "Requirement already satisfied: h5py in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from h5netcdf>=1.0.2->arviz>=0.13.0->pymc) (3.13.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (1.3.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (4.54.1)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (1.4.7)\n",
      "Requirement already satisfied: pillow>=8 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (10.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (3.2.0)\n",
      "Requirement already satisfied: importlib-resources>=3.2.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from matplotlib>=3.5->arviz>=0.13.0->pymc) (6.4.5)\n",
      "Requirement already satisfied: six>=1.5 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from python-dateutil>=2.8.2->pandas>=0.24.0->pymc) (1.16.0)\n",
      "Requirement already satisfied: toolz in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from logical-unification->pytensor<2.20,>=2.19->pymc) (1.0.0)\n",
      "Requirement already satisfied: multipledispatch in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from logical-unification->pytensor<2.20,>=2.19->pymc) (1.0.0)\n",
      "Requirement already satisfied: zipp>=3.1.0 in /Users/lakshaybansal/Desktop/quintar/NASCAR-data/nascar_py39/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib>=3.5->arviz>=0.13.0->pymc) (3.20.2)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.2\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.0.1\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip show pymc\n",
    "!python -m pip install pymc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "OxzKnUyU0d41"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pymc'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[18], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpymc\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mpm\u001b[39;00m\n\u001b[1;32m      3\u001b[0m num_features \u001b[38;5;241m=\u001b[39m Xs_train\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Bayesian model with spike-and-slab prior (note this takes around 5 minutes)\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# Note that in 3.2, the expression cannot be optimized analytically with a closed form solution.\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# The following code uses an iterative gradient decsent optimization procedure to find a local maximum\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pymc'"
     ]
    }
   ],
   "source": [
    "import pymc as pm\n",
    "\n",
    "num_features = Xs_train.shape[1]\n",
    "\n",
    "# Bayesian model with spike-and-slab prior (note this takes around 5 minutes)\n",
    "# Note that in 3.2, the expression cannot be optimized analytically with a closed form solution.\n",
    "# The following code uses an iterative gradient decsent optimization procedure to find a local maximum\n",
    "\n",
    "with pm.Model() as model:\n",
    "    logit_gamma = pm.Normal(\"logit_gamma\", mu=0, sigma=1, shape=num_features)\n",
    "    gamma = pm.Deterministic(\"gamma\", pm.math.sigmoid(logit_gamma))  # Continuous approximation of bernoulli to speed up gradient-based optimization\n",
    "\n",
    "    beta = pm.Normal(\"beta\", mu=0, sigma=1, shape=num_features) * gamma\n",
    "    sigma = pm.HalfNormal(\"sigma\", sigma=1) # This is a normal distribution but only takes positive values (positive half of a normal distribution)\n",
    "\n",
    "    mu = pm.math.dot(Xs_train, beta)\n",
    "    y_obs = pm.Normal(\"y_obs\", mu=mu, sigma=sigma, observed=ys_train)\n",
    "\n",
    "    map_estimate = pm.find_MAP()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "yauANPmZ7CK2"
   },
   "outputs": [],
   "source": [
    "gamma_map = map_estimate[\"gamma\"]\n",
    "\n",
    "# Plot the MAP estimate of gamma\n",
    "plt.figure(figsize=(8, 4))\n",
    "plt.bar(np.arange(len(gamma_map)), gamma_map, color=\"blue\", alpha=0.7)\n",
    "plt.xlabel(\"Feature Index\")\n",
    "plt.ylabel(\"MAP Estimate of $\\gamma$\")\n",
    "plt.title(\"MAP Estimate of Feature Inclusion Probabilities ($\\gamma$)\")\n",
    "plt.xticks(np.arange(0, len(gamma_map), 100))\n",
    "plt.ylim(0, 1)  # Since gamma is in (0,1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "be5ddrOj6S6M"
   },
   "source": [
    "# [10 Points] Question 3: Model Selection & Cross Validation\n",
    "\n",
    "Using the intuition we have built around regularization, we will now explore practical strategies for selecting the best parameters for a model. We will use the following function to perform cross validation\n",
    "\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html\n",
    "\n",
    "#### [10 Points] 3.1: Define a range of parameters and number of cross validation folds. Report the best parameter and mean squared error obtained on the held-out testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "DflgvdAcFRSe"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/sklearn/linear_model/_ridge.py:215: LinAlgWarning: Ill-conditioned matrix (rcond=3.33423e-08): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, assume_a=\"pos\", overwrite_a=True).T\n",
      "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/sklearn/linear_model/_ridge.py:215: LinAlgWarning: Ill-conditioned matrix (rcond=3.72851e-08): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, assume_a=\"pos\", overwrite_a=True).T\n",
      "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/sklearn/linear_model/_ridge.py:215: LinAlgWarning: Ill-conditioned matrix (rcond=3.44859e-08): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, assume_a=\"pos\", overwrite_a=True).T\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=Ridge(),\n",
       "             param_grid={&#x27;alpha&#x27;: [0.01, 0, 1, 10, 100]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=Ridge(),\n",
       "             param_grid={&#x27;alpha&#x27;: [0.01, 0, 1, 10, 100]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: Ridge</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>Ridge(alpha=0.01)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Ridge</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.Ridge.html\">?<span>Documentation for Ridge</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>Ridge(alpha=0.01)</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=3, estimator=Ridge(),\n",
       "             param_grid={'alpha': [0.01, 0, 1, 10, 100]})"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "ridge_model = Ridge()\n",
    "\n",
    "# Define hyperparameter grid for Ridge Regression (This is only graded on completion and not on model performance)\n",
    "param_grid = {'alpha': [0.01,0,1,10,100]} #TODO: Fill in\n",
    "\n",
    "# Perform GridSearchCV with 3-fold cross-validation\n",
    "grid_search = GridSearchCV(estimator=ridge_model, param_grid=param_grid, cv=3)\n",
    "grid_search.fit(Xs_train, ys_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.03221734439530549\n"
     ]
    }
   ],
   "source": [
    "# Finding the MSE with best param\n",
    "best_param = 0.01\n",
    "model = RidgeRegression(best_param)\n",
    "model.fit(Xs_train, ys_train)\n",
    "\n",
    "predictions = model.predict(Xs_test)\n",
    "mse = np.mean((ys_test - predictions) ** 2)\n",
    "print(mse)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
